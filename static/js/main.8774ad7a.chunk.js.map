{"version":3,"sources":["TodoForm.js","App.js","index.js"],"names":["TodoForm","_ref","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","react_default","a","createElement","onSubmit","e","preventDefault","type","placeholder","onChange","target","className","App","task","completed","todos","setTodos","console","log","Todo","todo","index","Completed","Erase","done","completedContainer","color","backgroundColor","completedTask","textDecoration","style","onClick","newTodo","toConsumableArray","removeTodo","splice","map","key","src_TodoForm","concat","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"uKA4BeA,SAxBE,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QAAcC,EACNC,mBAAS,IADHC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBK,EADyBH,EAAA,GAClBI,EADkBJ,EAAA,GAWhC,OACEK,EAAAC,EAAAC,cAAA,QAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACFP,EAAQN,EAAQM,GAASC,EAAS,MAOhCC,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLC,YAAY,WACZT,MAAOA,EACPU,SARc,SAAAJ,GAAC,OAAIL,EAASK,EAAEK,OAAOX,QASrCY,UAAU,wBCwDHC,MAzEf,WAAe,IAAAlB,EACaC,mBAAS,CACjC,CAAEkB,KAAM,0BAA2BC,WAAW,GAC9C,CAAED,KAAM,sBAAuBC,WAAW,GAC1C,CAAED,KAAM,qCAAsCC,WAAW,KAJ9ClB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNqB,EADMnB,EAAA,GACCoB,EADDpB,EAAA,GAMbqB,QAAQC,IAAIH,GAEZ,IAAMI,EAAO,SAAA3B,GAAuC,IAApC4B,EAAoC5B,EAApC4B,KAAMC,EAA8B7B,EAA9B6B,MAAOC,EAAuB9B,EAAvB8B,UAAWC,EAAY/B,EAAZ+B,MAClCC,EAAOJ,EAAKN,UACZW,EAAqB,CACvBC,MAAOF,EAAO,UAAY,GAC1BG,gBAAiBH,EAAO,uBAAyB,IAE/CI,EAAgB,CAAEC,eAAgBL,EAAO,eAAiB,IAC9D,OACEvB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,YAAYmB,MAAOL,GAChCxB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGQ,UAAU,kBAAkBmB,MAAOF,GACnCR,EAAKP,OAGVZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,iBAAiBoB,QAAS,kBAAMT,EAAUD,KAA5D,QAGApB,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,aAAaoB,QAAS,kBAAMR,EAAMF,KAApD,QAaFC,EAAY,SAAAD,GAChB,IAAMW,EAAOnC,OAAAoC,EAAA,EAAApC,CAAOkB,GACpBiB,EAAQX,GAAOP,WAAY,EAC3BE,EAASgB,IAGLT,EAAQ,SAAAF,GACZ,IAAMa,EAAUrC,OAAAoC,EAAA,EAAApC,CAAOkB,GACvBmB,EAAWC,OAAOd,EAAO,GACzBL,EAASkB,IAGX,OACEjC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,QACbV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACZI,EAAMqB,IAAI,SAAChB,EAAMC,GAAP,OACTpB,EAAAC,EAAAC,cAACgB,EAAD,CACEkB,IAAKhB,EACLA,MAAOA,EACPD,KAAMA,EACNE,UAAWA,EACXC,MAAOA,OAIbtB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACbV,EAAAC,EAAAC,cAACmC,EAAD,CAAU7C,QAhCF,SAAAoB,GACd,IAAMmB,EAAO,GAAAO,OAAA1C,OAAAoC,EAAA,EAAApC,CAAOkB,GAAP,CAAc,CAAEF,UAC7BG,EAASgB,UCnCPQ,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASL","file":"static/js/main.8774ad7a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// I will create one more component right now\r\n// It's will be form wich add one more todo to our to do list\r\nconst TodoForm = ({ addTodo }) => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  // create event handler function\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    value ? addTodo(value) : setValue(\"\");\r\n  }\r\n\r\n  const changeInput = e => setValue(e.target.value)\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Add task\"\r\n        value={value}\r\n        onChange={changeInput}\r\n        className=\"Todo-form--input\"\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n\r\n// Then we create a button that will clear our task\r\n// from todo board\r\n// in order to do it we need to check\r\n// that our task is complete because\r\n// we don't wanna be bad guys and erase incomplete tasks\r\n// so we need conditional statement which check that for us\r\n// after we check we remove child element from DOM\r\n// with .remove method BUT we don't forget about INDEX\r\n// of a child we also need check INDEX of COMPLETED CHILD\r\n// and remove child with only completed task\r\n//also we must remove our remove button and check button\r\n//from the DOM and be sure that our child's display\r\n// properly\r\n","import React, { useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([\r\n    { task: \"Write the awesome story\", completed: false },\r\n    { task: \"Read what you wrote\", completed: false },\r\n    { task: \"Understand that you still horrible\", completed: false }\r\n  ]);\r\n  console.log(todos);\r\n\r\n  const Todo = ({ todo, index, Completed, Erase }) => {\r\n    let done = todo.completed;\r\n    let completedContainer = {\r\n      color: done ? \"#454a54\" : \"\",\r\n      backgroundColor: done ? \"rgba(232,204,25, .6)\" : \"\"\r\n    };\r\n    let completedTask = { textDecoration: done ? \"line-through\" : \"\" };\r\n    return (\r\n      <div className=\"Todo-item\" style={completedContainer}>\r\n        <div>\r\n          <p className=\"Todo-item--task\" style={completedTask}>\r\n            {todo.task}\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <button className=\"Todo-completed\" onClick={() => Completed(index)}>\r\n            Done\r\n          </button>\r\n          <button className=\"Todo-erase\" onClick={() => Erase(index)}>\r\n            X\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const addTodo = task => {\r\n    const newTodo = [...todos, { task }];\r\n    setTodos(newTodo);\r\n  }\r\n\r\n  const Completed = index => {\r\n    const newTodo = [...todos];\r\n    newTodo[index].completed = true;\r\n    setTodos(newTodo);\r\n  }\r\n\r\n  const Erase = index => {\r\n    const removeTodo = [...todos];\r\n    removeTodo.splice(index, 1);\r\n    setTodos(removeTodo);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Todo\">\r\n        <div className=\"Todo-list\">\r\n          {todos.map((todo, index) => (\r\n            <Todo\r\n              key={index}\r\n              index={index}\r\n              todo={todo}\r\n              Completed={Completed}\r\n              Erase={Erase}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"Todo-form\">\r\n          <TodoForm addTodo={addTodo} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n//Comments about how I can implement const Todo but by other way\r\n// my personal component const Done = ({ todos }) => todos.map(todo => <div>{todo.task}</div>);\r\n// actually I can not to pass a parametr to const Done. It will be like this:\r\n// const DealWithIt = () => todos.map(todo => <div>{todo.task}</div>);\r\n// and it still will work (with this function better dont pus param it's seems pointless for now)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n\n\n\n"],"sourceRoot":""}